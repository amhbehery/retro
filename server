#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/inline'

gemfile do
  source 'https://rubygems.org'
  gem 'sinatra', require: false
  gem 'sinatra-contrib'
end

require 'sinatra'
require_relative 'helpers'

set :port, 3000

boards = {}
cards = []

get '/' do
  erb :index
end

get '/username' do
  erb :username, locals: { back: request.referer }
end

post '/username' do
  cookies[:username] = params[:username]
  cookies[:userid] = SecureRandom.uuid unless cookies.key?(:userid)
  redirect params[:back]
end

get '/boards/:board' do
  redirect '/username' unless cookies[:userid]

  board = boards[params[:board]]
  redirect '/' unless board

  erb :board, locals: { board: boards[params[:board]] }
end

post '/boards' do
  id = SecureRandom.uuid

  board = params.slice(:name, :columns).merge(id: id)
  board[:columns] = board[:columns].lines.map(&:strip).reject(&:empty?)

  boards[id] = board
  redirect "/boards/#{id}"
end

get '/boards/:board/cards' do
  board = boards[params[:board]]
  redirect '/' unless board

  erb :cards, locals: { board: boards[params[:board]], cards: board_cards(params[:board], cards) }
end

post '/boards/:board/cards' do
  board = boards[params[:board]]
  redirect '/' unless board

  cards << params.slice(:board, :column, :message).merge(username: cookies[:username])
  redirect "/boards/#{params[:board]}"
end
